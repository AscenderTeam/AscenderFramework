{%- for from_package, package_type in package_imports -%}
from {{ from_package }} import {{ package_type }}
{% endfor %}
{{- upper_section -}}
{%- for entity in entities %}
    async def create_{{ entity.name | stripped }}(self, **data) -> {{ entity.name }}:
        entity = {{ entity.name }}(**data)
        await entity.save()

        return entity

    async def update_{{ entity.name | stripped }}(self, {{ entity.name | stripped }}_id: {{ entity.fields.id | field_type }}, **data) -> {{ entity.name }}:
        entity = await {{ entity.name }}.filter(id={{ entity.name | stripped }}_id).first()

        for k, v in data.items():
            setattr(entity, k, v)
        
        await entity.save()
        return entity

    async def get_{{ entity.name | stripped }}s(self) -> list[{{ entity.name }}]:
        return await {{ entity.name }}.all()

    async def get_{{ entity.name | stripped }}s_offset(self, offset: int, limit: int) -> list[{{ entity.name }}]:
        return await {{ entity.name }}.all().offset(offset).limit(limit)

    async def get_{{ entity.name | stripped }}s_count(self) -> int:
        return await {{ entity.name }}.all().count()

    async def get_{{ entity.name | stripped }}(self, {{ entity.name | stripped }}_id: {{ entity.fields.id | field_type }}) -> {{ entity.name }} | None:
        return await {{ entity.name }}.filter({{ entity.name | stripped }}_id).first()
{% endfor -%}